/* Declarações Preliminares */
import java_cup.runtime.*;

parser code {:

	LuaLexer luaLexer;

	public parser(LuaLexer luaLexer) { 
    	this.luaLexer = luaLexer; 
    }
    
    /* Change the method report_error so it will display the line 
    and column of where the error occurred in the input as well as the reason 
    for the error which is passed into the method in the String 'message'.  */ 
    public void report_error(String message, Object info) {
    
    	/* Create a StringBuffer called 'm' with the string 'Error' in it. */
    	StringBuffer m = new StringBuffer("Error");

    	/* Check if the information passed to the method is the same type as the 
       	type java_cup.runtime.Symbol. */ 
    	if (info instanceof java_cup.runtime.Symbol) {

      		/* Declare a java_cup.runtime.Symbol object 's' with the information in the 
          	object info that is being typecasted as a java_cup.runtime.Symbol object. */ 
      		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      		/* Check if the line number in the input is greater or equal to zero. */ 
      		if (s.left >= 0) {

        		/* Add to the end of the StringBuffer error message the line number of 
           		the error in the input. */ 
        		m.append(" in line "+(s.left+1));

        		/* Check if the column number in the input is greater or equal to 
           		zero. */ 
        		if (s.right >= 0)
          			/* Add to the end of the StringBuffer error message the column number 
             		of the error in the input. */ 
          			m.append(", column "+(s.right+1)); 
          	}
       	}
       	
       	/* Add to the end of the StringBuffer error message created in this 
       	method the message that was passed into this method. */ 
    	m.append(" : "+message);

    	/* Print the contents of the StringBuffer 'm', which contains an error 
    	message out on a line. */ 
    	System.err.println(m); 
    }

  	/* Change the method report_fatal_error so when it reports a fatal error it 
  	will display the line and column number of where the fatal error 
    occurred in the input as well as the reason for the fatal error which is 
   	passed into the method in the object 'message' and then exit.*/ 
   	public void report_fatal_error(String message, Object info) { 
    	report_error(message, info); 
    	System.exit(1); 
    }
    
:};

scan with {: return luaLexer.yylex(); :}; 


/* Declarações de Terminais e Não-Terminais */

terminal		LPAREN, RPAREN, LBRACK, RBRACK, LCURLY, RCURLY,
				COLON, SEMICOL, COMMA, DOT, POUND, CONCAT,
				ATT, PLUS, MULT, DIVIDE, MINUS, EXP, MOD, 
				LOCAL, FUNCTION, RETURN, FOR, REPEAT, UNTIL, WHILE,
				DO, IN, BREAK, OR, AND, NOT, IF, THEN, ELSE, ELSEIF,
				END, TRUE, FALSE, NIL;				

terminal String ID, STRING, NUMERO;
terminal String RELOP;

/* non terminal - APENSA QUANDO ESCREVER A GRAMÁTICA*/



/* Precedência e Associatividade de Terminais */

precedence left OR;
precedence left AND;
precedence left RELOP;
precedence right CONCAT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
precedence left NOT, POUND, MINUS;
precedence right EXP;
     

/* Gramática */

/* =================== NOT OK =================== */ ==========================================================
trecho ::= {comando [`;´]} [ultimocomando [`;´]]
Trecho ::= $$$$

/* ===================== OK ===================== */
bloco ::= trecho
Bloco ::= Trecho
		;

/* ===================== OK ===================== */
comando ::=  listavar `=´ listaexp | 
		 chamadadefuncao | 
		 do bloco end | 
		 while exp do bloco end | 
		 repeat bloco until exp | 
		 if exp then bloco {elseif exp then bloco} [else bloco] end | 
		 for Nome `=´ exp `,´ exp [`,´ exp] do bloco end | 
		 for listadenomes in listaexp do bloco end | 
		 function nomedafuncao corpodafuncao | 
		 local function Nome corpodafuncao | 
		 local listadenomes [`=´ listaexp]
Comando ::= DO Bloco END
		| ComandoIterativo
		| ComandoCondicional
		| ComandoFuncao
		| ComandoAtribuicao
		;

/* =================== NOT OK =================== */ ==========================================================
ComandoCondicional ::= IF Expressao $$$$$$$$$$
					;

/* =================== NOT OK =================== */ ==========================================================
ComandoIterativo ::= WHILE Expressao DO Bloco END
					| REPEAT Bloco UNTIL Expressao
					| FOR $$$$$$$$$
					| FOR ListaDeNomes IN ListaExpressao DO Bloco END
					;

/* =================== NOT OK =================== */ ==========================================================
ComandoAtribuicao ::= ListaVar ATT ListaExp
					| LOCAL ListaDeNomes $$$$$$

/* ===================== OK ===================== */
ComandoFuncao ::= ChamadaDeFuncao
				| FUNCTION NomeDaFuncao CorpoDaFuncao
				| LOCAL FUNCTION ID CorpoDaFuncao
				;

/* ===================== OK ===================== */
ultimocomando ::= return [listaexp] | break
UltimoComando ::= RETURN
				| RETURN ListaExpressao
				| BREAK
				;

/* =================== NOT OK =================== */ ==========================================================
nomedafuncao ::= Nome {`.´ Nome} [`:´ Nome]
NomeDaFuncao ::= 

/* =================== NOT OK =================== */ +++++++++++++=============================================
listavar ::= var {`,´ var}
ListaVar ::= Var
			| Var COMMA ListaVar
			;

/* ===================== OK ===================== */
var ::=  Nome | expprefixo `[´ exp `]´ | expprefixo `.´ Nome
Var ::= ID
		| ExpressaoPrefixo LBRACK Expressao RBRACK
		| ExpressaoPrefixo DOT ID
		;

/* =================== NOT OK =================== */ +++++++++++++=============================================
listadenomes ::= Nome {`,´ Nome}
ListaDeNomes ::= ID
				| ID COMMA ListaDeNomes
				;

/* ===================== OK ===================== */
listaexp ::= {exp `,´} exp
ListaExpressao ::= ListaExpressao COMMA Expressao
				| Expressao
				;

/* =================== NOT OK =================== */ ==========================================================
exp ::=  nil | false | true | Numero | Cadeia | `...´ | funcao | 
		 expprefixo | construtortabela | exp opbin exp | opunaria exp
Expressao ::= NIL {: RESULT = null; :}
			| TRUE {: RESULT = true; :}
			| FALSE {: RESULT = false; :}
			| NUMERO
			| STRING
			| Funcao
			| ExpressaoPrefixo
			| ConstrutorTabela
			| Expressao OperadorBinario Expressao
			| OperadorUnario Expressao
			;

/* ===================== OK ===================== */
expprefixo ::= var | chamadadefuncao | `(´ exp `)´
ExpressaoPrefixo ::= Var
				| ChamadaDeFuncao
				| LPAREN Expressao RPAREN
				;

/* ===================== OK ===================== */
chamadadefuncao ::=  expprefixo args | expprefixo `:´ Nome args 
ChamadaDeFuncao ::= ExpressaoPrefixo Args
				| ExpressaoPrefixo COLON ID Args
				;

/* ===================== OK ===================== */
args ::=  `(´ [listaexp] `)´ | construtortabela | Cadeia 
Args ::= LPAREN ListaExpressao RPAREN
		| LPAREN RPAREN
		| ConstrutorTabela
		| Cadeia
		;

/* ===================== OK ===================== */
funcao ::= function corpodafuncao
Funcao ::= FUNCTION CorpoDaFuncao
		;

/* ===================== OK ===================== */
corpodafuncao ::= `(´ [listapar] `)´ bloco end
CorpoDaFuncao ::= LPAREN ListaParametro RPAREN Bloco END
				| LPAREN RPAREN Bloco END
				;

/* =================== NOT OK =================== */ ==========================================================
listapar ::= listadenomes [`,´ `...´] | `...´
ListaParametro ::= $$$$$$$ 

/* ===================== OK ===================== */
construtortabela ::= `{´ [listadecampos] `}´
ConstrutorTabela ::= LCURLY ListaDeCampos RCURLY
					| LCURLY RCURLY
					;

/* =================== NOT OK =================== */ +++++++++++++++++++ ======================================
listadecampos ::= campo {separadordecampos campo} [separadordecampos]
ListaDeCampos ::= Campo
				| Campo SeparadorDeCampos ListaDeCampos
				| Campo SeparadorDeCampos
				| Campo SeparadorDeCampos ListaDeCampos SeparadorDeCampos
				;

/* ===================== OK ===================== */		 
campo ::= `[´ exp `]´ `=´ exp | Nome `=´ exp | exp
Campo ::= LBRACK Expressao RBRACK ATT Expressao
		| ID ATT Expressao
		| Expressao
		;

/* ===================== OK ===================== */
separadordecampos ::= `,´ | `;´
SeparadorDeCampos ::= COMMA {: RESULT = ","; :}
					| SEMICOL {: RESULT = ";"; :}
					;

/* ===================== OK ===================== */
opbin ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | 
		 `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | 
		 and | or
OperadorBinario ::= PLUS {: RESULT = "+"; :}
				| MINUS {: RESULT = "-"; :}
				| MULT {: RESULT = "*"; :}
				| DIVIDE {: RESULT = "/"; :}
				| EXP {: RESULT = "^"; :}
				| MOD {: RESULT = "%"; :}
				| CONCAT {: RESULT = ".."; :}
				| LT {: RESULT = "<"; :}
				| GT {: RESULT = ">"; :}
				| LE {: RESULT = "<="; :}
				| GE {: RESULT = ">="; :}
				| NEQUAL {: RESULT = "~="; :}
				| EQUAL {: RESULT = "=="; :}
				| AND {: RESULT = "and"; :}
				| OR {: RESULT = "or"; :}
				;

/* ===================== OK ===================== */
opunaria ::= `-´ | not | `#´
OperadorUnaria ::= NOT {: RESULT = "not"; :}
				| MINUS {: RESULT = "-"; :}
				| POUND {: RESULT = "#"; :}
				;

				