
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 27 23:52:19 GMT-03:00 2011
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 27 23:52:19 GMT-03:00 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\005\000\002\002\003\000\002\002\004" +
    "\000\002\034\003\000\002\034\004\000\002\034\004\000" +
    "\002\003\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\005" +
    "\007\000\002\005\011\000\002\005\010\000\002\005\012" +
    "\000\002\035\003\000\002\036\006\000\002\006\007\000" +
    "\002\006\006\000\002\006\013\000\002\006\015\000\002" +
    "\006\011\000\002\007\005\000\002\007\004\000\002\007" +
    "\006\000\002\010\003\000\002\010\005\000\002\010\006" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\012\003\000\002\013\003\000\002\013\005\000\002" +
    "\014\003\000\002\014\006\000\002\014\005\000\002\015" +
    "\003\000\002\015\005\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\004\000\002\020\003\000\002\020\003\000\002\020\005" +
    "\000\002\021\004\000\002\021\006\000\002\022\005\000" +
    "\002\022\004\000\002\022\003\000\002\022\003\000\002" +
    "\023\004\000\002\024\007\000\002\024\006\000\002\025" +
    "\003\000\002\026\005\000\002\026\004\000\002\027\003" +
    "\000\002\027\004\000\002\027\005\000\002\027\006\000" +
    "\002\030\007\000\002\030\005\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\030\004\016\027\011\030\013\031\012\032" +
    "\030\033\031\035\006\036\020\040\023\044\014\062\017" +
    "\001\002\000\022\002\ufff4\013\ufff4\031\ufff4\034\ufff4\040" +
    "\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000\022\004\uffca" +
    "\006\uffca\010\uffca\012\uffca\014\260\015\uffca\020\uffdd\063" +
    "\uffca\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\022\002\001\013\252\031\012" +
    "\034\001\040\023\046\001\047\001\050\001\001\002\000" +
    "\036\002\uffe4\004\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffe4" +
    "\015\uffc9\031\uffe4\034\uffe4\040\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\063\uffc9\001\002\000\006\030\244\062\144\001\002" +
    "\000\046\002\uffe1\004\016\010\046\013\uffe1\016\042\024" +
    "\051\030\044\034\uffe1\043\041\046\uffe1\047\uffe1\050\uffe1" +
    "\051\043\052\050\053\045\062\017\063\047\064\052\001" +
    "\002\000\004\062\237\001\002\000\032\004\016\010\046" +
    "\016\042\024\051\030\044\043\041\051\043\052\050\053" +
    "\045\062\017\063\047\064\052\001\002\000\004\002\215" +
    "\001\002\000\032\004\016\010\046\016\042\024\051\030" +
    "\044\043\041\051\043\052\050\053\045\062\017\063\047" +
    "\064\052\001\002\000\112\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\031\uffdb\034\uffdb\036\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb" +
    "\001\002\000\030\004\016\027\011\030\013\031\012\032" +
    "\030\033\031\035\006\036\020\040\023\044\014\062\017" +
    "\001\002\000\022\002\ufff5\013\ufff5\031\ufff5\034\ufff5\040" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\001\002\000\022\002\ufffb" +
    "\013\210\031\ufffb\034\ufffb\040\ufffb\046\ufffb\047\ufffb\050" +
    "\ufffb\001\002\000\016\002\uffdf\013\uffdf\034\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\001\002\000\016\002\ufffd\013\207\034" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002\000\022\002\ufff3" +
    "\013\ufff3\031\ufff3\034\ufff3\040\ufff3\046\ufff3\047\ufff3\050" +
    "\ufff3\001\002\000\016\004\105\006\104\010\046\012\103" +
    "\015\107\063\102\001\002\000\022\002\ufff6\013\ufff6\031" +
    "\ufff6\034\ufff6\040\ufff6\046\ufff6\047\ufff6\050\ufff6\001\002" +
    "\000\004\062\164\001\002\000\030\004\016\027\011\030" +
    "\013\031\012\032\030\033\031\035\006\036\020\040\023" +
    "\044\014\062\017\001\002\000\004\020\033\001\002\000" +
    "\032\004\016\010\046\016\042\024\051\030\044\043\041" +
    "\051\043\052\050\053\045\062\017\063\047\064\052\001" +
    "\002\000\066\002\uffd5\005\uffd5\013\uffd5\014\uffd5\017\072" +
    "\021\071\022\063\023\062\024\061\025\075\026\064\031" +
    "\uffd5\034\uffd5\036\uffd5\040\uffd5\041\077\042\060\046\uffd5" +
    "\047\uffd5\050\uffd5\054\076\055\074\056\073\057\065\060" +
    "\067\061\070\001\002\000\074\002\uffcd\005\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\014\uffcd\017\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\031\uffcd\034\uffcd\036\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\001\002\000\032\004\016\010\046\016\042\024\051\030" +
    "\044\043\041\051\043\052\050\053\045\062\017\063\047" +
    "\064\052\001\002\000\110\002\uffca\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\031\uffca\034\uffca\036\uffca\040\uffca\041\uffca" +
    "\042\uffca\045\uffca\046\uffca\047\uffca\050\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063\uffca\001\002" +
    "\000\110\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\031" +
    "\uffc9\034\uffc9\036\uffc9\040\uffc9\041\uffc9\042\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\063\uffc9\001\002\000\032\004\uffa3" +
    "\010\uffa3\016\uffa3\024\uffa3\030\uffa3\043\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\062\uffa3\063\uffa3\064\uffa3\001\002\000\032" +
    "\004\uffa1\010\uffa1\016\uffa1\024\uffa1\030\uffa1\043\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\062\uffa1\063\uffa1\064\uffa1\001\002" +
    "\000\074\002\uffd2\005\uffd2\007\uffd2\011\uffd2\013\uffd2\014" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\031\uffd2\034\uffd2\036\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\060\uffd2\061\uffd2\001\002\000\004\004" +
    "\143\001\002\000\074\002\uffd4\005\uffd4\007\uffd4\011\uffd4" +
    "\013\uffd4\014\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\031\uffd4\034\uffd4\036\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\001\002" +
    "\000\036\004\016\006\121\010\046\011\122\016\042\024" +
    "\051\030\044\043\041\051\043\052\050\053\045\062\123" +
    "\063\047\064\052\001\002\000\074\002\uffd0\005\uffd0\007" +
    "\uffd0\011\uffd0\013\uffd0\014\uffd0\017\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\031\uffd0\034\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\001\002\000\074\002\uffd3\005\uffd3\007\uffd3\011\uffd3" +
    "\013\uffd3\014\uffd3\017\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\034\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\001\002" +
    "\000\032\004\uffa2\010\uffa2\016\uffa2\024\uffa2\030\uffa2\043" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\001\002\000\074\002\uffd1\005\uffd1\007\uffd1\011\uffd1\013" +
    "\uffd1\014\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\031\uffd1\034\uffd1\036\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\001\002\000" +
    "\110\002\uffce\004\105\005\uffce\006\104\007\uffce\010\046" +
    "\011\uffce\012\103\013\uffce\014\uffce\015\107\017\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\031\uffce" +
    "\034\uffce\036\uffce\040\uffce\041\uffce\042\uffce\045\uffce\046" +
    "\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\063\102\001\002\000\074\002\uffcf\005" +
    "\uffcf\007\uffcf\011\uffcf\013\uffcf\014\uffcf\017\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\031\uffcf\034" +
    "\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\001\002\000\024\002\uffe7\013\uffe7\014\056" +
    "\031\uffe7\034\uffe7\040\uffe7\046\uffe7\047\uffe7\050\uffe7\001" +
    "\002\000\032\004\016\010\046\016\042\024\051\030\044" +
    "\043\041\051\043\052\050\053\045\062\017\063\047\064" +
    "\052\001\002\000\066\002\uffd6\005\uffd6\013\uffd6\014\uffd6" +
    "\017\072\021\071\022\063\023\062\024\061\025\075\026" +
    "\064\031\uffd6\034\uffd6\036\uffd6\040\uffd6\041\077\042\060" +
    "\046\uffd6\047\uffd6\050\uffd6\054\076\055\074\056\073\057" +
    "\065\060\067\061\070\001\002\000\032\004\uffa5\010\uffa5" +
    "\016\uffa5\024\uffa5\030\uffa5\043\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\001\002\000\032\004\uffb1" +
    "\010\uffb1\016\uffb1\024\uffb1\030\uffb1\043\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\062\uffb1\063\uffb1\064\uffb1\001\002\000\032" +
    "\004\uffaf\010\uffaf\016\uffaf\024\uffaf\030\uffaf\043\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\062\uffaf\063\uffaf\064\uffaf\001\002" +
    "\000\032\004\uffb0\010\uffb0\016\uffb0\024\uffb0\030\uffb0\043" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\062\uffb0\063\uffb0\064\uffb0" +
    "\001\002\000\032\004\uffad\010\uffad\016\uffad\024\uffad\030" +
    "\uffad\043\uffad\051\uffad\052\uffad\053\uffad\062\uffad\063\uffad" +
    "\064\uffad\001\002\000\032\004\uffa8\010\uffa8\016\uffa8\024" +
    "\uffa8\030\uffa8\043\uffa8\051\uffa8\052\uffa8\053\uffa8\062\uffa8" +
    "\063\uffa8\064\uffa8\001\002\000\032\004\016\010\046\016" +
    "\042\024\051\030\044\043\041\051\043\052\050\053\045" +
    "\062\017\063\047\064\052\001\002\000\032\004\uffa7\010" +
    "\uffa7\016\uffa7\024\uffa7\030\uffa7\043\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\062\uffa7\063\uffa7\064\uffa7\001\002\000\032\004" +
    "\uffa6\010\uffa6\016\uffa6\024\uffa6\030\uffa6\043\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\062\uffa6\063\uffa6\064\uffa6\001\002\000" +
    "\032\004\uffb2\010\uffb2\016\uffb2\024\uffb2\030\uffb2\043\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\062\uffb2\063\uffb2\064\uffb2\001" +
    "\002\000\032\004\uffac\010\uffac\016\uffac\024\uffac\030\uffac" +
    "\043\uffac\051\uffac\052\uffac\053\uffac\062\uffac\063\uffac\064" +
    "\uffac\001\002\000\032\004\uffa9\010\uffa9\016\uffa9\024\uffa9" +
    "\030\uffa9\043\uffa9\051\uffa9\052\uffa9\053\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\001\002\000\032\004\uffaa\010\uffaa\016\uffaa" +
    "\024\uffaa\030\uffaa\043\uffaa\051\uffaa\052\uffaa\053\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\001\002\000\032\004\uffae\010\uffae" +
    "\016\uffae\024\uffae\030\uffae\043\uffae\051\uffae\052\uffae\053" +
    "\uffae\062\uffae\063\uffae\064\uffae\001\002\000\032\004\uffab" +
    "\010\uffab\016\uffab\024\uffab\030\uffab\043\uffab\051\uffab\052" +
    "\uffab\053\uffab\062\uffab\063\uffab\064\uffab\001\002\000\032" +
    "\004\uffa4\010\uffa4\016\uffa4\024\uffa4\030\uffa4\043\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\062\uffa4\063\uffa4\064\uffa4\001\002" +
    "\000\074\002\uffcc\005\uffcc\007\uffcc\011\uffcc\013\uffcc\014" +
    "\uffcc\017\072\021\071\022\063\023\062\024\061\025\075" +
    "\026\064\031\uffcc\034\uffcc\036\uffcc\040\uffcc\041\077\042" +
    "\060\045\uffcc\046\uffcc\047\uffcc\050\uffcc\054\076\055\074" +
    "\056\073\057\065\060\067\061\070\001\002\000\110\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\017\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\031\uffc7\034\uffc7" +
    "\036\uffc7\040\uffc7\041\uffc7\042\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\050\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\063\uffc7\001\002\000\110\002\uffc2\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\031\uffc2\034\uffc2\036\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2" +
    "\001\002\000\004\062\116\001\002\000\032\004\016\010" +
    "\046\016\042\024\051\030\044\043\041\051\043\052\050" +
    "\053\045\062\017\063\047\064\052\001\002\000\034\004" +
    "\016\005\111\010\046\016\042\024\051\030\044\043\041" +
    "\051\043\052\050\053\045\062\017\063\047\064\052\001" +
    "\002\000\110\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\031\uffc3\034\uffc3\036\uffc3\040\uffc3\041\uffc3\042\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\063\uffc3\001\002\000\004\062" +
    "\110\001\002\000\112\002\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\031\uffd9\034\uffd9\036\uffd9\040\uffd9\041" +
    "\uffd9\042\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\063\uffd9\001" +
    "\002\000\110\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\031\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\063\uffc4\001\002\000\006\005" +
    "\113\014\056\001\002\000\110\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\031\uffc5\034\uffc5\036\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5\001" +
    "\002\000\042\007\115\017\072\021\071\022\063\023\062" +
    "\024\061\025\075\026\064\041\077\042\060\054\076\055" +
    "\074\056\073\057\065\060\067\061\070\001\002\000\112" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\031" +
    "\uffda\034\uffda\036\uffda\040\uffda\041\uffda\042\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\054\uffda\055\uffda\056\uffda\057" +
    "\uffda\060\uffda\061\uffda\063\uffda\001\002\000\010\004\105" +
    "\010\046\063\102\001\002\000\110\002\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\031\uffc6\034\uffc6\036\uffc6\040\uffc6" +
    "\041\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6" +
    "\001\002\000\046\011\uffb5\013\uffb5\014\uffb5\017\072\021" +
    "\071\022\063\023\062\024\061\025\075\026\064\041\077" +
    "\042\060\054\076\055\074\056\073\057\065\060\067\061" +
    "\070\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\110\002\uffbc\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\031\uffbc\034\uffbc\036\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\001" +
    "\002\000\064\004\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020\134\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\041\uffdb\042\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063" +
    "\uffdb\001\002\000\010\011\uffbb\013\130\014\127\001\002" +
    "\000\004\011\126\001\002\000\110\002\uffbd\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\031\uffbd\034\uffbd\036\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd" +
    "\001\002\000\042\004\uffb4\006\uffb4\010\uffb4\011\uffb4\013" +
    "\uffb4\014\uffb4\016\uffb4\024\uffb4\030\uffb4\043\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\062\uffb4\063\uffb4\064\uffb4\001\002\000" +
    "\042\004\uffb3\006\uffb3\010\uffb3\011\uffb3\013\uffb3\014\uffb3" +
    "\016\uffb3\024\uffb3\030\uffb3\043\uffb3\051\uffb3\052\uffb3\053" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002\000\042\004\016" +
    "\006\121\010\046\011\uffba\013\uffba\014\uffba\016\042\024" +
    "\051\030\044\043\041\051\043\052\050\053\045\062\123" +
    "\063\047\064\052\001\002\000\010\011\uffb9\013\130\014" +
    "\127\001\002\000\010\011\uffb8\013\uffb8\014\uffb8\001\002" +
    "\000\032\004\016\010\046\016\042\024\051\030\044\043" +
    "\041\051\043\052\050\053\045\062\017\063\047\064\052" +
    "\001\002\000\046\011\uffb6\013\uffb6\014\uffb6\017\072\021" +
    "\071\022\063\023\062\024\061\025\075\026\064\041\077" +
    "\042\060\054\076\055\074\056\073\057\065\060\067\061" +
    "\070\001\002\000\042\007\137\017\072\021\071\022\063" +
    "\023\062\024\061\025\075\026\064\041\077\042\060\054" +
    "\076\055\074\056\073\057\065\060\067\061\070\001\002" +
    "\000\004\020\140\001\002\000\032\004\016\010\046\016" +
    "\042\024\051\030\044\043\041\051\043\052\050\053\045" +
    "\062\017\063\047\064\052\001\002\000\046\011\uffb7\013" +
    "\uffb7\014\uffb7\017\072\021\071\022\063\023\062\024\061" +
    "\025\075\026\064\041\077\042\060\054\076\055\074\056" +
    "\073\057\065\060\067\061\070\001\002\000\074\002\uffc1" +
    "\005\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\031\uffc1" +
    "\034\uffc1\036\uffc1\040\uffc1\041\uffc1\042\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\001\002\000\006\005\146\062\144\001" +
    "\002\000\032\002\uffd8\005\uffd8\013\uffd8\014\156\020\uffd8" +
    "\031\uffd8\034\uffd8\037\uffd8\040\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\001\002\000\004\005\uffbe\001\002\000\030\004\016" +
    "\027\011\030\013\031\012\032\030\033\031\035\006\036" +
    "\020\040\023\044\014\062\017\001\002\000\004\005\150" +
    "\001\002\000\030\004\016\027\011\030\013\031\012\032" +
    "\030\033\031\035\006\036\020\040\023\044\014\062\017" +
    "\001\002\000\012\034\ufff8\046\ufff8\047\ufff8\050\ufff8\001" +
    "\002\000\004\050\153\001\002\000\074\002\uffc0\005\uffc0" +
    "\007\uffc0\011\uffc0\013\uffc0\014\uffc0\017\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\031\uffc0\034\uffc0" +
    "\036\uffc0\040\uffc0\041\uffc0\042\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\004\050\155\001\002\000\074\002" +
    "\uffbf\005\uffbf\007\uffbf\011\uffbf\013\uffbf\014\uffbf\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\031" +
    "\uffbf\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf\045\uffbf" +
    "\046\uffbf\047\uffbf\050\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\001\002\000\004\062\144\001\002" +
    "\000\030\002\uffd7\005\uffd7\013\uffd7\020\uffd7\031\uffd7\034" +
    "\uffd7\037\uffd7\040\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002" +
    "\000\074\002\uffcb\005\uffcb\007\uffcb\011\uffcb\013\uffcb\014" +
    "\uffcb\017\072\021\071\022\063\023\062\024\061\025\075" +
    "\026\064\031\uffcb\034\uffcb\036\uffcb\040\uffcb\041\077\042" +
    "\060\045\uffcb\046\uffcb\047\uffcb\050\uffcb\054\076\055\074" +
    "\056\073\057\065\060\067\061\070\001\002\000\004\034" +
    "\162\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\060\002\uffeb\013\uffeb\017\072" +
    "\021\071\022\063\023\062\024\061\025\075\026\064\031" +
    "\uffeb\034\uffeb\040\uffeb\041\077\042\060\046\uffeb\047\uffeb" +
    "\050\uffeb\054\076\055\074\056\073\057\065\060\067\061" +
    "\070\001\002\000\010\014\156\020\173\037\uffd8\001\002" +
    "\000\004\037\166\001\002\000\032\004\016\010\046\016" +
    "\042\024\051\030\044\043\041\051\043\052\050\053\045" +
    "\062\017\063\047\064\052\001\002\000\006\014\056\036" +
    "\170\001\002\000\030\004\016\027\011\030\013\031\012" +
    "\032\030\033\031\035\006\036\020\040\023\044\014\062" +
    "\017\001\002\000\004\050\172\001\002\000\022\002\uffe8" +
    "\013\uffe8\031\uffe8\034\uffe8\040\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\042\014\175\017\072\021\071" +
    "\022\063\023\062\024\061\025\075\026\064\041\077\042" +
    "\060\054\076\055\074\056\073\057\065\060\067\061\070" +
    "\001\002\000\032\004\016\010\046\016\042\024\051\030" +
    "\044\043\041\051\043\052\050\053\045\062\017\063\047" +
    "\064\052\001\002\000\044\014\200\017\072\021\071\022" +
    "\063\023\062\024\061\025\075\026\064\036\177\041\077" +
    "\042\060\054\076\055\074\056\073\057\065\060\067\061" +
    "\070\001\002\000\030\004\016\027\011\030\013\031\012" +
    "\032\030\033\031\035\006\036\020\040\023\044\014\062" +
    "\017\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\042\017\072\021\071\022\063" +
    "\023\062\024\061\025\075\026\064\036\202\041\077\042" +
    "\060\054\076\055\074\056\073\057\065\060\067\061\070" +
    "\001\002\000\030\004\016\027\011\030\013\031\012\032" +
    "\030\033\031\035\006\036\020\040\023\044\014\062\017" +
    "\001\002\000\004\050\204\001\002\000\022\002\uffe9\013" +
    "\uffe9\031\uffe9\034\uffe9\040\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\001\002\000\004\050\206\001\002\000\022\002\uffea\013" +
    "\uffea\031\uffea\034\uffea\040\uffea\046\uffea\047\uffea\050\uffea" +
    "\001\002\000\014\002\ufffc\034\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\001\002\000\022\002\ufffa\013\ufffa\031\ufffa\034\ufffa" +
    "\040\ufffa\046\ufffa\047\ufffa\050\ufffa\001\002\000\004\050" +
    "\212\001\002\000\022\002\ufff7\013\ufff7\031\ufff7\034\ufff7" +
    "\040\ufff7\046\ufff7\047\ufff7\050\ufff7\001\002\000\042\005" +
    "\214\017\072\021\071\022\063\023\062\024\061\025\075" +
    "\026\064\041\077\042\060\054\076\055\074\056\073\057" +
    "\065\060\067\061\070\001\002\000\110\002\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\031\uffc8\034\uffc8\036\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063" +
    "\uffc8\001\002\000\004\002\000\001\002\000\042\017\072" +
    "\021\071\022\063\023\062\024\061\025\075\026\064\041" +
    "\077\042\060\045\217\054\076\055\074\056\073\057\065" +
    "\060\067\061\070\001\002\000\030\004\016\027\011\030" +
    "\013\031\012\032\030\033\031\035\006\036\020\040\023" +
    "\044\014\062\017\001\002\000\010\046\221\047\222\050" +
    "\225\001\002\000\030\004\016\027\011\030\013\031\012" +
    "\032\030\033\031\035\006\036\020\040\023\044\014\062" +
    "\017\001\002\000\032\004\016\010\046\016\042\024\051" +
    "\030\044\043\041\051\043\052\050\053\045\062\017\063" +
    "\047\064\052\001\002\000\006\046\226\050\227\001\002" +
    "\000\006\046\uffee\050\uffee\001\002\000\022\002\ufff2\013" +
    "\ufff2\031\ufff2\034\ufff2\040\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\001\002\000\030\004\016\027\011\030\013\031\012\032" +
    "\030\033\031\035\006\036\020\040\023\044\014\062\017" +
    "\001\002\000\022\002\ufff0\013\ufff0\031\ufff0\034\ufff0\040" +
    "\ufff0\046\ufff0\047\ufff0\050\ufff0\001\002\000\004\050\231" +
    "\001\002\000\022\002\uffef\013\uffef\031\uffef\034\uffef\040" +
    "\uffef\046\uffef\047\uffef\050\uffef\001\002\000\042\017\072" +
    "\021\071\022\063\023\062\024\061\025\075\026\064\041" +
    "\077\042\060\045\233\054\076\055\074\056\073\057\065" +
    "\060\067\061\070\001\002\000\030\004\016\027\011\030" +
    "\013\031\012\032\030\033\031\035\006\036\020\040\023" +
    "\044\014\062\017\001\002\000\006\046\uffed\050\uffed\001" +
    "\002\000\004\050\236\001\002\000\022\002\ufff1\013\ufff1" +
    "\031\ufff1\034\ufff1\040\ufff1\046\ufff1\047\ufff1\050\ufff1\001" +
    "\002\000\004\004\uffde\001\002\000\004\004\143\001\002" +
    "\000\022\002\uffe3\013\uffe3\031\uffe3\034\uffe3\040\uffe3\046" +
    "\uffe3\047\uffe3\050\uffe3\001\002\000\020\002\uffe0\013\uffe0" +
    "\014\056\034\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002\000" +
    "\024\002\uffe6\013\uffe6\020\247\031\uffe6\034\uffe6\040\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\001\002\000\004\062\245\001" +
    "\002\000\004\004\143\001\002\000\022\002\uffe2\013\uffe2" +
    "\031\uffe2\034\uffe2\040\uffe2\046\uffe2\047\uffe2\050\uffe2\001" +
    "\002\000\032\004\016\010\046\016\042\024\051\030\044" +
    "\043\041\051\043\052\050\053\045\062\017\063\047\064" +
    "\052\001\002\000\024\002\uffe5\013\uffe5\014\056\031\uffe5" +
    "\034\uffe5\040\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002\000" +
    "\016\002\uffff\013\253\034\uffff\046\uffff\047\uffff\050\uffff" +
    "\001\002\000\022\002\ufff9\013\ufff9\031\ufff9\034\ufff9\040" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\001\002\000\014\002\ufffe" +
    "\034\ufffe\046\ufffe\047\ufffe\050\ufffe\001\002\000\042\017" +
    "\072\021\071\022\063\023\062\024\061\025\075\026\064" +
    "\036\255\041\077\042\060\054\076\055\074\056\073\057" +
    "\065\060\067\061\070\001\002\000\030\004\016\027\011" +
    "\030\013\031\012\032\030\033\031\035\006\036\020\040" +
    "\023\044\014\062\017\001\002\000\004\050\257\001\002" +
    "\000\022\002\uffec\013\uffec\031\uffec\034\uffec\040\uffec\046" +
    "\uffec\047\uffec\050\uffec\001\002\000\006\004\016\062\017" +
    "\001\002\000\004\020\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\032\002\014\004\021\005\020\006\026\007" +
    "\024\010\003\011\023\013\031\014\004\020\025\021\007" +
    "\034\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\036\017\253\020\052\021\037\023\053\026\034" +
    "\033\035\001\001\000\004\011\250\001\001\000\002\001" +
    "\001\000\004\015\242\001\001\000\022\014\036\016\241" +
    "\017\033\020\052\021\037\023\053\026\034\033\035\001" +
    "\001\000\004\012\237\001\001\000\020\014\036\017\215" +
    "\020\052\021\037\023\053\026\034\033\035\001\001\000" +
    "\002\001\001\000\020\014\036\017\212\020\052\021\037" +
    "\023\053\026\034\033\035\001\001\000\002\001\001\000" +
    "\034\002\150\003\210\004\021\005\020\006\026\007\024" +
    "\010\003\011\023\013\031\014\004\020\025\021\007\034" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\100\026\105\001\001\000\002\001\001\000\004\015\164" +
    "\001\001\000\034\002\150\003\160\004\021\005\020\006" +
    "\026\007\024\010\003\011\023\013\031\014\004\020\025" +
    "\021\007\034\006\001\001\000\002\001\001\000\022\014" +
    "\036\016\054\017\033\020\052\021\037\023\053\026\034" +
    "\033\035\001\001\000\004\032\065\001\001\000\002\001" +
    "\001\000\020\014\036\017\157\020\052\021\037\023\053" +
    "\026\034\033\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\141\001\001\000\002\001\001\000\024\014" +
    "\036\017\117\020\052\021\037\023\053\026\034\027\124" +
    "\030\123\033\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\100" +
    "\026\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\014\036\017\056\020\052\021\037\023\053\026\034" +
    "\033\035\001\001\000\004\032\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\036\017" +
    "\077\020\052\021\037\023\053\026\034\033\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\036\017\113\020\052\021\037\023" +
    "\053\026\034\033\035\001\001\000\022\014\036\016\111" +
    "\017\033\020\052\021\037\023\053\026\034\033\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\065\001\001\000\002\001\001\000\006\022\116" +
    "\026\105\001\001\000\002\001\001\000\004\032\065\001" +
    "\001\000\020\014\036\017\135\020\052\021\037\023\053" +
    "\026\034\033\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\036\017\117\020\052\021\037\023\053\026\034\027\131" +
    "\030\123\033\035\001\001\000\004\031\132\001\001\000" +
    "\002\001\001\000\020\014\036\017\134\020\052\021\037" +
    "\023\053\026\034\033\035\001\001\000\004\032\065\001" +
    "\001\000\004\032\065\001\001\000\002\001\001\000\020" +
    "\014\036\017\140\020\052\021\037\023\053\026\034\033" +
    "\035\001\001\000\004\032\065\001\001\000\002\001\001" +
    "\000\006\015\144\025\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\150\003\153\004\021\005\020" +
    "\006\026\007\024\010\003\011\023\013\031\014\004\020" +
    "\025\021\007\034\006\001\001\000\002\001\001\000\034" +
    "\002\150\003\151\004\021\005\020\006\026\007\024\010" +
    "\003\011\023\013\031\014\004\020\025\021\007\034\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\156" +
    "\001\001\000\002\001\001\000\004\032\065\001\001\000" +
    "\002\001\001\000\020\014\036\017\162\020\052\021\037" +
    "\023\053\026\034\033\035\001\001\000\004\032\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\036" +
    "\016\166\017\033\020\052\021\037\023\053\026\034\033" +
    "\035\001\001\000\002\001\001\000\034\002\150\003\170" +
    "\004\021\005\020\006\026\007\024\010\003\011\023\013" +
    "\031\014\004\020\025\021\007\034\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\036\017\173\020" +
    "\052\021\037\023\053\026\034\033\035\001\001\000\004" +
    "\032\065\001\001\000\020\014\036\017\175\020\052\021" +
    "\037\023\053\026\034\033\035\001\001\000\004\032\065" +
    "\001\001\000\034\002\150\003\204\004\021\005\020\006" +
    "\026\007\024\010\003\011\023\013\031\014\004\020\025" +
    "\021\007\034\006\001\001\000\020\014\036\017\200\020" +
    "\052\021\037\023\053\026\034\033\035\001\001\000\004" +
    "\032\065\001\001\000\034\002\150\003\202\004\021\005" +
    "\020\006\026\007\024\010\003\011\023\013\031\014\004" +
    "\020\025\021\007\034\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\065\001\001\000\034\002\150\003" +
    "\217\004\021\005\020\006\026\007\024\010\003\011\023" +
    "\013\031\014\004\020\025\021\007\034\006\001\001\000" +
    "\006\035\222\036\223\001\001\000\034\002\150\003\234" +
    "\004\021\005\020\006\026\007\024\010\003\011\023\013" +
    "\031\014\004\020\025\021\007\034\006\001\001\000\020" +
    "\014\036\017\231\020\052\021\037\023\053\026\034\033" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\002\150\003\227\004\021\005\020\006" +
    "\026\007\024\010\003\011\023\013\031\014\004\020\025" +
    "\021\007\034\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\065\001\001\000\034" +
    "\002\150\003\233\004\021\005\020\006\026\007\024\010" +
    "\003\011\023\013\031\014\004\020\025\021\007\034\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\245\001\001\000\002\001\001\000\022" +
    "\014\036\016\247\017\033\020\052\021\037\023\053\026" +
    "\034\033\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\065\001" +
    "\001\000\034\002\150\003\255\004\021\005\020\006\026" +
    "\007\024\010\003\011\023\013\031\014\004\020\025\021" +
    "\007\034\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\260\014\004\020\025\021\037\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	LuaLexer luaLexer;

	public parser(LuaLexer luaLexer) { 
    	this.luaLexer = luaLexer; 
    }
    
    /* Change the method report_error so it will display the line 
    and column of where the error occurred in the input as well as the reason 
    for the error which is passed into the method in the String 'message'.  */ 
    public void report_error(String message, Object info) {
    
    	/* Create a StringBuffer called 'm' with the string 'Error' in it. */
    	StringBuffer m = new StringBuffer("Error");

    	/* Check if the information passed to the method is the same type as the 
       	type java_cup.runtime.Symbol. */ 
    	if (info instanceof java_cup.runtime.Symbol) {

      		/* Declare a java_cup.runtime.Symbol object 's' with the information in the 
          	object info that is being typecasted as a java_cup.runtime.Symbol object. */ 
      		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      		/* Check if the line number in the input is greater or equal to zero. */ 
      		if (s.left >= 0) {

        		/* Add to the end of the StringBuffer error message the line number of 
           		the error in the input. */ 
        		m.append(" in line "+(s.left+1));

        		/* Check if the column number in the input is greater or equal to 
           		zero. */ 
        		if (s.right >= 0)
          			/* Add to the end of the StringBuffer error message the column number 
             		of the error in the input. */ 
          			m.append(", column "+(s.right+1)); 
          	}
       	}
       	
       	/* Add to the end of the StringBuffer error message created in this 
       	method the message that was passed into this method. */ 
    	m.append(" : "+message);

    	/* Print the contents of the StringBuffer 'm', which contains an error 
    	message out on a line. */ 
    	System.err.println(m); 
    }

  	/* Change the method report_fatal_error so when it reports a fatal error it 
  	will display the line and column number of where the fatal error 
    occurred in the input as well as the reason for the fatal error which is 
   	passed into the method in the object 'message' and then exit.*/ 
   	public void report_fatal_error(String message, Object info) { 
    	report_error(message, info); 
    	System.exit(1); 
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OperadorUnario ::= POUND 
            {
              Object RESULT =null;
		 RESULT = "#"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OperadorUnario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadorUnario ::= NOT 
            {
              Object RESULT =null;
		 RESULT = "not"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorUnario",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadorBinario ::= OR 
            {
              Object RESULT =null;
		 RESULT = "or"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadorBinario ::= AND 
            {
              Object RESULT =null;
		 RESULT = "and"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadorBinario ::= EQUAL 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadorBinario ::= NEQUAL 
            {
              Object RESULT =null;
		 RESULT = "~="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadorBinario ::= GE 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadorBinario ::= LE 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OperadorBinario ::= GT 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadorBinario ::= LT 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorBinario ::= CONCAT 
            {
              Object RESULT =null;
		 RESULT = ".."; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorBinario ::= MOD 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorBinario ::= EXP 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorBinario ::= DIVIDE 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorBinario ::= MULT 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadorBinario ::= MINUS 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadorBinario ::= PLUS 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OperadorBinario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SeparadorDeCampos ::= SEMICOL 
            {
              Object RESULT =null;
		 RESULT = ";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SeparadorDeCampos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SeparadorDeCampos ::= COMMA 
            {
              Object RESULT =null;
		 RESULT = ","; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SeparadorDeCampos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Campo ::= Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Campo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Campo ::= ID ATT Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Campo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Campo ::= LBRACK Expressao RBRACK ATT Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Campo",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListaDeCampos ::= Campo SeparadorDeCampos ListaDeCampos SeparadorDeCampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeCampos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListaDeCampos ::= Campo SeparadorDeCampos ListaDeCampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeCampos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ListaDeCampos ::= Campo SeparadorDeCampos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeCampos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ListaDeCampos ::= Campo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeCampos",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ConstrutorTabela ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrutorTabela",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConstrutorTabela ::= LCURLY ListaDeCampos RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstrutorTabela",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListaParametro ::= ListaDeNomes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaParametro",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CorpoDaFuncao ::= LPAREN RPAREN Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CorpoDaFuncao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CorpoDaFuncao ::= LPAREN ListaParametro RPAREN Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CorpoDaFuncao",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Funcao ::= FUNCTION CorpoDaFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Funcao",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Args ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Args ::= ConstrutorTabela 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Args ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Args ::= LPAREN ListaExpressao RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Args",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ChamadaDeFuncao ::= ExpressaoPrefixo COLON ID Args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ChamadaDeFuncao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ChamadaDeFuncao ::= ExpressaoPrefixo Args 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ChamadaDeFuncao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpressaoPrefixo ::= LPAREN Expressao RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoPrefixo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpressaoPrefixo ::= ChamadaDeFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoPrefixo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpressaoPrefixo ::= Var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressaoPrefixo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expressao ::= OperadorUnario Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expressao ::= Expressao OperadorBinario Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expressao ::= ConstrutorTabela 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expressao ::= ExpressaoPrefixo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expressao ::= Funcao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expressao ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expressao ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expressao ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expressao ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expressao ::= NIL 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expressao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListaExpressao ::= Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaExpressao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ListaExpressao ::= ListaExpressao COMMA Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaExpressao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ListaDeNomes ::= ID COMMA ListaDeNomes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeNomes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ListaDeNomes ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaDeNomes",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Var ::= ExpressaoPrefixo DOT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Var ::= ExpressaoPrefixo LBRACK Expressao RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Var ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListaVar ::= Var COMMA ListaVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaVar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListaVar ::= Var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaVar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NomeDaFuncao ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NomeDaFuncao",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UltimoComando ::= BREAK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UltimoComando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UltimoComando ::= RETURN ListaExpressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UltimoComando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // UltimoComando ::= RETURN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("UltimoComando",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ComandoFuncao ::= LOCAL FUNCTION ID CorpoDaFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoFuncao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ComandoFuncao ::= FUNCTION NomeDaFuncao CorpoDaFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoFuncao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ComandoFuncao ::= ChamadaDeFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoFuncao",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ComandoAtribuicao ::= LOCAL ListaDeNomes ATT ListaExpressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoAtribuicao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ComandoAtribuicao ::= LOCAL ListaDeNomes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoAtribuicao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ComandoAtribuicao ::= ListaVar ATT ListaExpressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoAtribuicao",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ComandoIterativo ::= FOR ListaDeNomes IN ListaExpressao DO Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoIterativo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ComandoIterativo ::= FOR ID ATT Expressao COMMA Expressao COMMA Expressao DO Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoIterativo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ComandoIterativo ::= FOR ID ATT Expressao COMMA Expressao DO Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoIterativo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ComandoIterativo ::= REPEAT Bloco UNTIL Expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoIterativo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ComandoIterativo ::= WHILE Expressao DO Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoIterativo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Ecs ::= ELSEIF Expressao THEN Bloco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ecs",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListaEcs ::= Ecs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaEcs",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ComandoCondicional ::= IF Expressao THEN Bloco ListaEcs ELSE Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoCondicional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ComandoCondicional ::= IF Expressao THEN Bloco ListaEcs END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoCondicional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ComandoCondicional ::= IF Expressao THEN Bloco ELSE Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoCondicional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ComandoCondicional ::= IF Expressao THEN Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComandoCondicional",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Comando ::= ComandoAtribuicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Comando ::= ComandoFuncao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Comando ::= ComandoCondicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Comando ::= ComandoIterativo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Comando ::= DO Bloco END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Comando",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Bloco ::= Trecho 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Bloco",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListaComandos ::= ListaComandos SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaComandos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListaComandos ::= Comando SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaComandos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListaComandos ::= Comando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListaComandos",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Trecho ::= UltimoComando SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Trecho ::= UltimoComando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Trecho ::= ListaComandos UltimoComando SEMICOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Trecho ::= ListaComandos UltimoComando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Trecho EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Trecho ::= ListaComandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Trecho",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

